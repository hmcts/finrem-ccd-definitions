#!groovy
properties([
        pipelineTriggers([cron('00 20 * * *')]),
        parameters([
                string(name: 'RUNNING_ENV', defaultValue: 'aat', description: 'Environment to test'),
                string(name: 'CCD_WEB_URL', defaultValue: 'https://manage-case.aat.platform.hmcts.net/', description: 'The URL you want to run solicitor tests against'),
                string(name: 'CCD_ADMIN_URL', defaultValue: 'https://ccd-admin-web.aat.platform.hmcts.net', description: 'The URL you want to run ccd admin test'),
                string(name: 'DELAY', defaultValue: '0', description: 'end to end extra delay on')
        ])
])

@Library("Infrastructure")

String product = "finrem"
String component = "ccd-definitions"

def secrets = [
  'finrem-${env}': [
    secret('username-solicitor', 'USERNAME_SOLICITOR'),
    secret('password-solicitor', 'PASSWORD_SOLICITOR'),
    secret('username-caseworker', 'USERNAME_CASEWORKER'),
    secret('password-caseworker', 'PASSWORD_CASEWORKER'),
    secret('fr-judge-username', 'USERNAME_JUDGE'),
    secret('fr-judge-password', 'PASSWORD_JUDGE'),
    secret('username-caa', 'USERNAME_CAA'),
    secret('password-caa', 'PASSWORD_CAA'),
    secret('username-respondent-solicitor', 'USERNAME_RESPONDENT_SOLICITOR'),
    secret('idam-client-secret', 'IDAM_CLIENT_SECRET'),
    secret('ccd-submission-s2s-auth-secret', 'CCD_SUBMIT_S2S_SECRET'),
    secret('ccd-admin-username', 'CCD_ADMIN_USER_NAME'),
    secret('ccd-admin-password', 'CCD_ADMIN_PASSWORD')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withNightlyPipeline("nodejs", product, component) {
    env.CCD_WEB_URL = params.CCD_WEB_URL
    env.RUNNING_ENV = params.RUNNING_ENV
    env.XUI_ORG_WEB_URL =params.CCD_WEB_URL
    env.CCD_ADMIN_URL =params.CCD_ADMIN_URL
    env.NIGHTLY_TEST="true"
    env.NODE_ENV = 'ci'
    env.DELAY =params.DELAY
     
    loadVaultSecrets(secrets)
    enableFullFunctionalTest()
    enableCrossBrowserTest()

    after('fullFunctionalTest') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test/functional/output/**/*'
    }
    after('crossBrowserTest') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test/functional/output/**/*'
      }
}


